/*******************************************************************************
 * Copyright 2012-2013 Trento RISE
 * 
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 ******************************************************************************/
package eu.trentorise.smartcampus.domain.trentinofamiglia;

import it.sayservice.platform.compiler.domain.model.annotations.ServiceNotification;
import it.sayservice.platform.compiler.domain.model.annotations.Subscription;

import eu.trentorise.smartcampus.domain.discovertrento.EventService;
import eu.trentorise.smartcampus.domain.discovertrento.POIService;
import eu.trentorise.smartcampus.domain.discovertrento.GenericEvent;
import eu.trentorise.smartcampus.domain.discovertrento.GenericPOI;

import eu.trentorise.smartcampus.domain.trentinofamiglia.helper.OrganizationsData;


DomainObject TrentinoFamigliaService implements EventService {
    
    @ServiceNotification(serviceId="smartcampus.service.trentinofamiglia", methodName="GetEventi", converter="eu.trentorise.smartcampus.domain.trentinofamiglia.converter.EventsDataConverter")
    port update(data : GenericEvent[]);

    @Subscription(serviceId="smartcampus.service.trentinofamiglia", methodName="GetEventi")
    operation subscribeEvents();       
    
    action initialize() {
        invoke subscribeEvents();
    }
}

DomainObject OrganizzazioniCertificateService implements POIService {
    
	public var data : OrganizationsData;
	
	port update(data : GenericPOI[]);
	port errors(data : GenericPOI[]);

	action checkData(pois : GenericPOI[]) {
		set data = OrganizationsData.checkValidity(data,pois);
		valid : GenericPOI[] = OrganizationsData.getValidPOI(data); 
		if (count(valid) > 0) {
			publish update(valid);
		}
		errors : String[] = OrganizationsData.getErrors(data); 
		if (count(errors) > 0) {
			publish errors(errors);
		}		
	}

    action initialize() {
        set data = OrganizationsData.init();
    }
    
    subscribe OrganizzazioniSubscriber!update() => checkData(data);
    
}

DomainObject OrganizzazioniSubscriber  {

    @ServiceNotification(serviceId="smartcampus.service.trentinofamiglia", methodName="GetOrganizzazioni", converter="eu.trentorise.smartcampus.domain.trentinofamiglia.converter.OrganizationsDataConverter")
    port update(data : GenericPOI[]);

    @Subscription(serviceId="smartcampus.service.trentinofamiglia", methodName="GetOrganizzazioni")
    operation subscribeOrganizations();       
    
    action initialize() {
        invoke subscribeOrganizations();
    }

}
